<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.02" />
		<!-- <param name="/use_sim_time" value="true" /> -->
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="150.0" />
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/registered_cloud" />
		<!-- <param name="base_frame_id" value="base_link"/> -->
	
		<param name="pointcloud_min_z" type="double" value = "0.2" />
		<param name="pointcloud_max_z" type="double" value = "1.5" />
		<param name="occupancy_min_z" type="double" value = "0.2" />
		<param name="occupancy_max_z" type="double" value = "1.5" />
	</node>
</launch>